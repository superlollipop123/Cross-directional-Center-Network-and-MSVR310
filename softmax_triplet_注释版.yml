MODEL:
  PRETRAIN_CHOICE: 'imagenet' #预训练选择
  NAME: 'resnet50' # 模型选择
  # PRETRAIN_PATH: "F:\\myproject_mmdataset\\pretrain_file\\resnet50-19c8e357.pth"
  PRETRAIN_PATH: "C:\\Users\\zxp\\.torch\\models\\mobilenet_v2-b0353104.pth"
  # PRETRAIN_PATH: "C:\\Users\\zxp\\.torch\\models\\se_resnet50-ce0d4300.pth"
  # PRETRAIN_PATH: "C:\\Users\\zxp\\.torch\\models\\inception_v3_google-1a9a5a14.pth"
  # PRETRAIN_PATH: "C:\\Users\\zxp\\.torch\\models\\densenet121-a639ec97.pth"
  # PRETRAIN_PATH: "/home/zhuxianpeng/reid-strong-baseline-master/reid-strong-baseline-master/outputs/test/resnet50_model_110.pth"
  METRIC_LOSS_TYPE: 'triplet' # loss类型，详情见layers\__init__.py,在我这里不重要，因为我的损失都写在trainer里面，要不然改起来麻烦
  IF_LABELSMOOTH: 'no' # 标签平滑
  IF_WITH_CENTER: 'no' # 启用center loss
  BRANCHES: 3 # 我自己加的，网络分支数量，为了适配俩模态和三模态数据集

INPUT: #这个不用解释了吧
  SIZE_TRAIN: [128, 256]
  SIZE_TEST: [128, 256]
  PROB: 0.5 # random horizontal flip
  RE_PROB: 0.4 # random erasing
  PADDING: 10

DATASETS:
  NAMES: ('msvr310') #数据集名称，详情见 data\datasets\__init__.py

DATALOADER: 
  SAMPLER: 'softmax_triplet' #采样方式
  NUM_INSTANCE: 4
  NUM_WORKERS: 4

SOLVER:
  OPTIMIZER_NAME: 'Adam'
  MAX_EPOCHS: 1000 # 训练epoch数，msvr需要epoch多一点建议不低于600，rgbnt这种120就可以
  BASE_LR: 0.00035

  CLUSTER_MARGIN: 0.3

  CENTER_LR: 0.5
  CENTER_LOSS_WEIGHT: 0.0005
  CENTER_NUM: 3
  CENTER_F_DIM: 2048

  RANGE_K: 2
  RANGE_MARGIN: 0.3
  RANGE_ALPHA: 0
  RANGE_BETA: 1
  RANGE_LOSS_WEIGHT: 1

  BIAS_LR_FACTOR: 1
  WEIGHT_DECAY: 0.0005
  WEIGHT_DECAY_BIAS: 0.0005
  IMS_PER_BATCH: 32

  STEPS: [200, 350] # 在哪里学习率降低
  GAMMA: 0.1 # 学习率降低的比率

  WARMUP_FACTOR: 0.01
  WARMUP_ITERS: 10
  WARMUP_METHOD: 'linear'

  CHECKPOINT_PERIOD: 400 # 保存模型参数间隔
  LOG_PERIOD: 15 # log打印间隔
  EVAL_PERIOD: 50 # 测试间隔
TEST:
  IMS_PER_BATCH: 8
  RE_RANKING: 'no'
  WEIGHT: "outputs/CdC_lam03alpha06_ALNU/resnet50_model_800.pth"
  NECK_FEAT: 'after'
  FEAT_NORM: 'yes'


# 下面这些是我自己加的，你要是也想下先去config里面加上，然后在本文件按结构加
OUTPUT_DIR: ""
OUTPUT_ROOT: "outputs"
NAME: "test" # 本次训练保存时的名字
SAVE_LIST: ['modeling/baseline_zxp.py', 'engine/trainer.py'] # 保存时额外保存哪些代码
DCT: "some discription" # 描述
GPU: [0] #gpu编号
JUST_BASELINE: "no" # 指定模型
SAVE_FEAT: "no" # 忘了干啥用的，搜了一下好像没用到，懒得删了
ALPHA: 0.6 # 调节CdC loss中俩项的权重比例，在这里加上就不用每次都改代码了，配合run_list.py跑起来比较舒服
LAMBDA: 0.3 # 调节交叉熵和CdC loss的权重比例